
set -ex

{% if ceph_salt_git_repo and ceph_salt_git_branch %}
# install ceph-salt
cd /root
git clone {{ ceph_salt_git_repo }}
cd ceph-salt
zypper -n in autoconf gcc python3-devel python3-pip python3-curses

{% if ceph_salt_fetch_github_pr_heads %}
# fetch the available PRs (HEAD) from github. With that, "ceph_salt_git_branch" can be something like "origin/pr/127" to checkout a github PR
git fetch origin "+refs/pull/*/head:refs/remotes/origin/pr/*"
{% endif %}
{% if ceph_salt_fetch_github_pr_merges %}
# fetch the available PRs (MERGE) from github. With that, "ceph_salt_git_branch" can be something like "origin/pr-merged/127" to checkout a github PR
git fetch origin "+refs/pull/*/merge:refs/remotes/origin/pr-merged/*"
{% endif %}

git checkout {{ ceph_salt_git_branch }}

pip install --prefix /usr .
# install ceph-salt-formula
cp -r ceph-salt-formula/salt/* /srv/salt/
chown -R salt:salt /srv
{% else %}
# ceph-salt-formula is installed automatically as a dependency of ceph-salt
zypper -n in ceph-salt
{% endif %}

systemctl restart salt-master

# make sure all minions are responding
set +ex
LOOP_COUNT="0"
while true ; do
  set -x
  sleep 5
  set +x
  if [ "$LOOP_COUNT" -ge "20" ] ; then
    echo "ERROR: minion(s) not responding to ping?"
    exit 1
  fi
  LOOP_COUNT="$((LOOP_COUNT + 1))"
  set -x
  MINIONS_RESPONDING="$(salt '*' test.ping | grep True | wc --lines)"
  if [ "$MINIONS_RESPONDING" = "{{ nodes|length }}" ]; then
    break
  fi
  set +x
done
set -ex

{% if stop_before_ceph_salt_config %}
exit 0
{% endif %}

echo "PATH is $PATH"
type ceph-salt

MON_NODES_COMMA_SEPARATED_LIST=""
MGR_NODES_COMMA_SEPARATED_LIST=""
{% for node in nodes %}
{% if node.has_roles and not node.has_exclusive_role('client') %}
ceph-salt config /ceph_cluster/minions add {{ node.fqdn }}
ceph-salt config /ceph_cluster/roles/admin add {{ node.fqdn }}
{% endif %}
{% if node.has_role('bootstrap') %}
ceph-salt config /ceph_cluster/roles/bootstrap set {{ node.fqdn }}
{% endif %}
{% if node.has_role('mon') %}
MON_NODES_COMMA_SEPARATED_LIST+="{{ node.name }},"
{% endif %}
{% if node.has_role('mgr') %}
MGR_NODES_COMMA_SEPARATED_LIST+="{{ node.name }},"
{% endif %}
{% endfor %}
MON_NODES_COMMA_SEPARATED_LIST="${MON_NODES_COMMA_SEPARATED_LIST%,*}"
MGR_NODES_COMMA_SEPARATED_LIST="${MGR_NODES_COMMA_SEPARATED_LIST%,*}"

ceph-salt config /system_update/packages disable
ceph-salt config /system_update/reboot disable
ceph-salt config /ssh/ generate
{% if image_path %}
ceph-salt config /containers/images/ceph set {{ image_path }}
{% endif %}
ceph-salt config /time_server/server_hostname set {{ master.fqdn }}
ceph-salt config /time_server/external_servers add 0.pt.pool.ntp.org
{% if not ceph_salt_cephadm_bootstrap %}
ceph-salt config /deployment/bootstrap disable
{% endif %}

{% if ceph_salt_deploy_osds %}
{% if storage_nodes < 3 %}
ceph-salt config /cephadm_bootstrap/ceph_conf add global
ceph-salt config /cephadm_bootstrap/ceph_conf/global set "osd crush chooseleaf type" 0
{% endif %}
{% endif %} {# if ceph_salt_deploy_osds #}

ceph-salt config /cephadm_bootstrap/dashboard/username set admin
ceph-salt config /cephadm_bootstrap/dashboard/password set admin

ceph-salt config ls
ceph-salt export --pretty
ceph-salt status

zypper lr -upEP
zypper info cephadm | grep -E '(^Repo|^Version)'
ceph-salt --version

{% if stop_before_ceph_salt_deploy %}
exit 0
{% endif %}

{% if ceph_salt_deploy %}
stdbuf -o0 ceph-salt -ldebug deploy --non-interactive
{% else %}
salt -G 'ceph-salt:member' state.apply ceph-salt
{% endif %}

{% if ceph_salt_deploy_mons %}
{% if mon_nodes > 1 %}
TIME_SERVER="$(ceph-salt export | jq -r .time_server.server_host)"
salt "$TIME_SERVER" cmd.run 'bash -c "chronyc makestep && chronyc waitsync"'
{% for node in nodes %}
if [ "{{ node.fqdn }}" != "$TIME_SERVER" ] ; then
    salt "{{ node.fqdn }}" cmd.run 'bash -c "chronyc makestep && chronyc waitsync"'
fi
{% endfor %}
ceph orch apply mon "$MON_NODES_COMMA_SEPARATED_LIST"
{% endif %} {# mon_nodes > 1 #}
{% endif %} {# ceph_salt_deploy_mons #}

{% if ceph_salt_deploy_mgrs %}
{% if mgr_nodes > 1 %}
ceph orch apply mgr "$MGR_NODES_COMMA_SEPARATED_LIST"
{% endif %} {# mgr_nodes > 1 #}
{% endif %} {# ceph_salt_deploy_mgrs #}

{% if ceph_salt_deploy_osds %}
ceph orch device ls --refresh
{% for node in nodes %}
{% if node.has_role('storage') %}
echo "{\"service_type\": \"osd\", \"placement\": {\"host_pattern\": \"{{ node.name }}*\"}, \"service_id\": \"testing_dg_{{ node.name }}\", \"data_devices\": {\"all\": True}}" | ceph orch apply osd -i -
{% endif %}
{% endfor %}
{% endif %} {# if ceph_salt_deploy_osds #}

{% include "qa_test.sh" %}
